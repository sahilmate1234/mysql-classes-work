/* =======================================================
     PRACTICE SESSION – 6 : DATABASE – ISRO (AIRLINES)
     STUDENT NAME : SHALINI VERMA
     TOTAL MARKS  : 100
   ======================================================= */

/* ==========================
   1️⃣  CREATE DATABASE
   ========================== */
CREATE DATABASE ISRO_Airlines;
USE ISRO_Airlines;

/* ==========================
   2️⃣  CREATE TABLES
   ========================== */

/* ---------- 1. AIRLINES ---------- */
CREATE TABLE Airlines (
    Airline_ID INT PRIMARY KEY,
    Airline_Name VARCHAR(50),
    Country VARCHAR(30),
    Established_Year INT,
    Headquarters VARCHAR(50),
    CEO_Name VARCHAR(50),
    Total_Fleet INT,
    Website VARCHAR(100),
    Contact_Number VARCHAR(15),
    Email VARCHAR(50)
);

/* ---------- 2. AIRPORTS ---------- */
CREATE TABLE Airports (
    Airport_ID INT PRIMARY KEY,
    Airport_Name VARCHAR(50),
    City VARCHAR(30),
    State VARCHAR(30),
    Country VARCHAR(30),
    IATA_Code VARCHAR(10),
    ICAO_Code VARCHAR(10),
    Total_Runways INT,
    Capacity INT,
    Contact_Number VARCHAR(15)
);

/* ---------- 3. FLIGHTS ---------- */
CREATE TABLE Flights (
    Flight_ID INT PRIMARY KEY,
    Airline_ID INT,
    Flight_Number VARCHAR(20),
    From_Airport_ID INT,
    To_Airport_ID INT,
    Departure_Time DATETIME,
    Arrival_Time DATETIME,
    Duration VARCHAR(20),
    Status VARCHAR(20),
    Price DECIMAL(10,2),
    FOREIGN KEY (Airline_ID) REFERENCES Airlines(Airline_ID)
);

/* ---------- 4. PASSENGERS ---------- */
CREATE TABLE Passengers (
    Passenger_ID INT PRIMARY KEY,
    First_Name VARCHAR(30),
    Last_Name VARCHAR(30),
    Gender VARCHAR(10),
    DOB DATE,
    Nationality VARCHAR(30),
    Passport_No VARCHAR(20),
    Contact_Number VARCHAR(15),
    Email VARCHAR(50),
    Address VARCHAR(100)
);

/* ---------- 5. BOOKINGS ---------- */
CREATE TABLE Bookings (
    Booking_ID INT PRIMARY KEY,
    Passenger_ID INT,
    Flight_ID INT,
    Booking_Date DATE,
    Seat_Number VARCHAR(10),
    Ticket_Status VARCHAR(20),
    Payment_ID INT,
    Class_Type VARCHAR(20),
    Total_Amount DECIMAL(10,2),
    FOREIGN KEY (Passenger_ID) REFERENCES Passengers(Passenger_ID),
    FOREIGN KEY (Flight_ID) REFERENCES Flights(Flight_ID)
);

/* ---------- 6. PAYMENTS ---------- */
CREATE TABLE Payments (
    Payment_ID INT PRIMARY KEY,
    Booking_ID INT,
    Payment_Mode VARCHAR(20),
    Payment_Date DATE,
    Transaction_ID VARCHAR(30),
    Amount DECIMAL(10,2),
    Bank_Name VARCHAR(30),
    Status VARCHAR(20),
    Card_Number VARCHAR(20),
    FOREIGN KEY (Booking_ID) REFERENCES Bookings(Booking_ID)
);

/* ---------- 7. STAFF ---------- */
CREATE TABLE Staff (
    Staff_ID INT PRIMARY KEY,
    Airline_ID INT,
    First_Name VARCHAR(30),
    Last_Name VARCHAR(30),
    Role VARCHAR(30),
    Joining_Date DATE,
    Salary DECIMAL(10,2),
    Contact_Number VARCHAR(15),
    Email VARCHAR(50),
    Address VARCHAR(100),
    FOREIGN KEY (Airline_ID) REFERENCES Airlines(Airline_ID)
);

/* ---------- 8. LUGGAGE ---------- */
CREATE TABLE Luggage (
    Luggage_ID INT PRIMARY KEY,
    Passenger_ID INT,
    Weight DECIMAL(5,2),
    Dimensions VARCHAR(30),
    Type VARCHAR(20),
    Status VARCHAR(20),
    CheckIn_Time DATETIME,
    Tag_Number VARCHAR(20),
    Flight_ID INT,
    FOREIGN KEY (Passenger_ID) REFERENCES Passengers(Passenger_ID),
    FOREIGN KEY (Flight_ID) REFERENCES Flights(Flight_ID)
);

/* ---------- 9. MAINTENANCE ---------- */
CREATE TABLE Maintenance (
    Maintenance_ID INT PRIMARY KEY,
    Flight_ID INT,
    Date DATE,
    Engineer_Name VARCHAR(50),
    Issue_Reported VARCHAR(100),
    Parts_Replaced VARCHAR(100),
    Next_Service_Date DATE,
    Cost DECIMAL(10,2),
    Remarks VARCHAR(100),
    FOREIGN KEY (Flight_ID) REFERENCES Flights(Flight_ID)
);

/* ---------- 10. SCHEDULE ---------- */
CREATE TABLE Schedule (
    Schedule_ID INT PRIMARY KEY,
    Flight_ID INT,
    Day_of_Week VARCHAR(15),
    Departure_Time TIME,
    Arrival_Time TIME,
    Gate_Number VARCHAR(10),
    Remarks VARCHAR(50),
    FOREIGN KEY (Flight_ID) REFERENCES Flights(Flight_ID)
)

INSERT INTO Airlines VALUES
(1, 'ISRO Air', 'India', 2010, 'Bengaluru', 'Dr. Reddy', 45, 'www.isroair.in', '0801234567', 'info@isroair.in');

INSERT INTO Airports VALUES
(1, 'Kempegowda Intl', 'Bangalore', 'Karnataka', 'India', 'BLR', 'VOBL', 2, 5000, '0809876543');

INSERT INTO Passengers VALUES
(1, 'Ravi', 'Kumar', 'Male', '1990-04-15', 'Indian', 'P1234567', '9876543210', 'ravi@gmail.com', 'Delhi'),
(2, 'Priya', 'Sharma', 'Female', '1995-06-20', 'Indian', 'P7654321', '9898989898', 'priya@gmail.com', 'Mumbai');

INSERT INTO Flights VALUES
(1, 1, 'IS101', 1, 1, '2025-10-20 06:00:00', '2025-10-20 09:00:00', '3h', 'Scheduled', 5000.00),
(2, 1, 'IS202', 1, 1, '2025-10-21 10:00:00', '2025-10-21 13:00:00', '3h', 'Scheduled', 5500.00);

INSERT INTO Bookings VALUES
(1, 1, 1, '2025-10-10', '12A', 'Confirmed', 101, 'Economy', 5000.00),
(2, 2, 2, '2025-10-11', '14B', 'Pending', 102, 'Business', 5500.00);

INSERT INTO Payments VALUES
(101, 1, 'Credit Card', '2025-10-10', 'TXN9876', 5000.00, 'SBI', 'Success', '123456XXXXXX7890'),
(102, 2, 'UPI', '2025-10-11', 'TXN5432', 5500.00, 'HDFC', 'Pending', 'N/A');

/* ==========================
   4️⃣  SELECT QUERIES
   ========================== */

-- View all flights
SELECT * FROM Flights;

-- List passengers with confirmed tickets
SELECT P.First_Name, P.Last_Name, B.Ticket_Status
FROM Passengers P
JOIN Bookings B ON P.Passenger_ID = B.Passenger_ID
WHERE B.Ticket_Status = 'Confirmed';

-- Total payment received
SELECT SUM(Amount) AS Total_Revenue FROM Payments;

-- Flights operated by ISRO Air
SELECT F.Flight_Number, F.Status
FROM Flights F
JOIN Airlines A ON F.Airline_ID = A.Airline_ID
WHERE A.Airline_Name = 'ISRO Air';

-- Show booking details with passenger names
SELECT B.Booking_ID, P.First_Name, P.Last_Name, F.Flight_Number, B.Seat_Number, B.Ticket_Status
FROM Bookings B
JOIN Passengers P ON B.Passenger_ID = P.Passenger_ID
JOIN Flights F ON B.Flight_ID = F.Flight_ID;

/* ==========================
   5️⃣  TRUNCATE & DROP QUERIES
   ========================== */

-- Truncate removes data but keeps table structure
TRUNCATE TABLE Payments;

-- Drop completely deletes the table
DROP TABLE Maintenance;

